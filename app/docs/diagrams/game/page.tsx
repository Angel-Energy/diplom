"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import MermaidDiagram from "@/components/mermaid-diagram";

export default function GameDiagramsPage() {
  const gameDiagrams = [
    {
      title: "Game Loop (Основной цикл игры)",
      description: "Диаграмма показывает основной цикл игры: Получение сообщений → Чтение чатов → Выбор ответа → Решение мини-игры → Сохранение прогресса → Переход к следующей сцене. Мессенджер-интерфейс обеспечивает погружение в детектив.",
      conclusion: "Диаграмма помогает разработчикам реализовать основной игровой цикл, а геймдизайнерам — балансировать сложность. QA используют для тестирования пользовательского опыта и стабильности.",
      mermaid: `graph TD
    A[Запуск игры] --> B["Получение сообщений<br/>Мессенджер-интерфейс"]
    B --> C["Чтение чатов<br/>Диалоги с персонажами"]
    C --> D{"Выбор ответа<br/>Доверие/Подозрение"}
    D --> E["Решение мини-игры<br/>Python/JS задачи"]
    E --> F["Сохранение прогресса<br/>Room + DataStore"]
    F --> G{Следующая сцена?}
    G -->|Да| B
    G -->|Нет| H["Завершение дня"]
    H --> I{Следующий день?}
    I -->|Да| B
    I -->|Нет| J["Концовка<br/>5 вариантов"]`,
    },
    {
      title: "Диаграмма ветвления диалогов",
      description: "Показывает ветвление диалогов в мессенджере: Начальное сообщение → Выбор игрока (доверие/подозрение/нейтралитет) → Разные ответы персонажей → Новые выборы. Создает 60+ путей сюжета, влияя на отношения с персонажами.",
      conclusion: "Диаграмма помогает сценаристам создавать сложные сюжетные линии, а разработчикам — реализовать логику выборов в мессенджер-интерфейсе. QA тестируют все пути для обеспечения качества.",
      mermaid: `graph TD
    A["Сообщение от Елены<br/>\&quot;Алексей, у нас проблема...\&quot;"] --> B{Выбор игрока}
    B -->|"Доверяю"| C["Ответ Елены<br/>\&quot;Спасибо за доверие\&quot;"]
    B -->|"Подозреваю"| D["Ответ Елены<br/>\&quot;Понимаю твои сомнения\&quot;"]
    B -->|"Нейтрально"| E["Ответ Елены<br/>\&quot;Хорошо, как скажешь\&quot;"]
    
    C --> F["Новый выбор<br/>\&quot;Помочь с проблемой?\&quot;"]
    D --> G["Новый выбор<br/>\&quot;Потребовать объяснений?\&quot;"]
    E --> H["Новый выбор<br/>\&quot;Отложить решение?\&quot;"]
    
    F --> I[Флаг: доверие +1]
    G --> J[Флаг: подозрение +1]
    H --> K[Флаг: нейтралитет +1]`,
    },
    {
      title: "Структура игровых дней",
      description: "Описывает структуру 10 игровых дней: каждый день содержит 6 сцен (утро, день, вечер, ночь), 6 мини-игр, 3-5 ключевых выборов. Прогрессия сложности и напряжения создает драматическую арку детектива.",
      conclusion: "Диаграмма помогает геймдизайнерам планировать контент и балансировать сложность. Разработчики используют для структурирования данных, QA — для тестирования полноты сюжета.",
      mermaid: `graph LR
    subgraph "День 1: Знакомство"
        A1["Сцена 1: Утро<br/>Первое сообщение"]
        A2["Сцена 2: День<br/>Знакомство с коллегами"]
        A3["Сцена 3: Вечер<br/>Первая мини-игра"]
    end
    
    subgraph "День 5: Конфликт"
        B1["Сцена 1: Утро<br/>Подозрительные сообщения"]
        B2["Сцена 2: День<br/>Конфликт с начальником"]
        B3["Сцена 3: Вечер<br/>Сложная мини-игра"]
    end
    
    subgraph "День 10: Финал"
        C1["Сцена 1: Утро<br/>Кульминация"]
        C2["Сцена 2: День<br/>Финальный выбор"]
        C3["Сцена 3: Вечер<br/>Концовка"]
    end
    
    A3 --> B1
    B3 --> C1`,
    },
    {
      title: "Классификация мини-игр",
      description: "Показывает 60 мини-игр по категориям: Python-задачи (алгоритмы, отладка), JavaScript-задачи (веб-разработка, DOM), логические головоломки (криптография, анализ), образовательные (программирование). 6 игр на день.",
      conclusion: "Диаграмма помогает разработчикам реализовать разнообразные мини-игры, а геймдизайнерам — балансировать сложность. QA используют для тестирования всех типов игр и образовательной ценности.",
      mermaid: `graph TD
    A["60 мини-игр<br/>6 на день"] --> B["Python задачи<br/>20 игр"]
    A --> C["JavaScript задачи<br/>20 игр"]
    A --> D["Логические головоломки<br/>15 игр"]
    A --> E["Образовательные<br/>5 игр"]
    
    B --> F["Алгоритмы<br/>Сортировка, поиск"]
    B --> G["Отладка кода<br/>Поиск ошибок"]
    B --> H["Структуры данных<br/>Списки, словари"]
    
    C --> I["Веб-разработка<br/>HTML/CSS/JS"]
    C --> J["DOM манипуляции<br/>Изменение элементов"]
    C --> K["Асинхронность<br/>Promise, async/await"]
    
    D --> L["Криптография<br/>Шифрование/дешифрование"]
    D --> M["Анализ логов<br/>Поиск паттернов"]
    D --> N["Логические задачи<br/>Условия, циклы"]`,
    },
    {
      title: "Система концовок",
      description: "Описывает 5 концовок на основе накопленных флагов: Доверие (хорошая концовка), Подозрение (плохая концовка), Нейтралитет (балансированная), Предательство (неожиданная), Истина (скрытая). Выборы игрока определяют финал.",
      conclusion: "Диаграмма помогает сценаристам создавать эмоциональные концовки, а разработчикам — реализовать логику определения финала. QA тестируют все концовки для обеспечения реиграбельности.",
      mermaid: `graph TD
    A["Накопленные флаги<br/>Доверие, Подозрение, Доступ"] --> B{Анализ флагов}
    
    B -->|"Доверие > 70%"| C["Хорошая концовка<br/>\&quot;Правда восторжествовала\&quot;"]
    B -->|"Подозрение > 70%"| D["Плохая концовка<br/>\&quot;Паранойя погубила\&quot;"]
    B -->|"Баланс флагов"| E["Нейтральная концовка<br/>\&quot;Компромисс\&quot;"]
    B -->|"Особые условия"| F["Предательство<br/>\&quot;Неожиданный поворот\&quot;"]
    B -->|"Все флаги max"| G["Истина<br/>\&quot;Скрытая концовка\&quot;"]
    
    C --> H[Эпилог: Продвижение]
    D --> I[Эпилог: Увольнение]
    E --> J[Эпилог: Статус-кво]
    F --> K[Эпилог: Интрига]
    G --> L[Эпилог: Полная картина]`,
    },
    {
      title: "Система персонажей",
      description: "Показывает 6 персонажей и их роли: Алексей (главный герой), Елена (коллега/союзник), Максим (начальник/антагонист), Павел (информатор), Ольга (HR/наблюдатель), Неизвестный (загадочный). Каждый влияет на сюжет.",
      conclusion: "Диаграмма помогает сценаристам развивать персонажей, а разработчикам — реализовать их взаимодействие в мессенджере. QA используют для тестирования диалогов и влияния персонажей на сюжет.",
      mermaid: `graph TD
    A["Алексей Соколов<br/>Главный герой<br/>Программист"] --> B["Елена Васильева<br/>Коллега<br/>Возможный союзник"]
    A --> C["Максим Журавлёв<br/>Начальник<br/>Скрывает правду"]
    A --> D["Павел Семёнов<br/>Информатор<br/>Загадочный источник"]
    A --> E["Ольга Серебрякова<br/>HR-менеджер<br/>Следит за сотрудниками"]
    A --> F["Неизвестный<br/>Анонимный отправитель<br/>Неясные намерения"]
    
    B --> G[Флаг: доверие<br/>Влияет на концовку]
    C --> H[Флаг: подозрение<br/>Создает напряжение]
    D --> I[Флаг: доступ<br/>Открывает информацию]
    E --> J[Флаг: осторожность<br/>Влияет на выборы]
    F --> K[Флаг: любопытство<br/>Ведет к истине]`,
    },
  ];

  return (
    <div className="space-y-8">
      <div className="space-y-4">
        <h1 className="text-4xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent">
          Игровые механики
        </h1>
        <p className="text-xl text-slate-300">6 диаграмм, описывающих Game Loop, диалоги, мини-игры и прогрессию для проекта «Сообщение 404».</p>
        <div className="flex flex-wrap gap-2">
          <Badge variant="outline" className="bg-red-500/10 text-red-400 border-red-500/20">
            Game Loop
          </Badge>
          <Badge variant="outline" className="bg-orange-500/10 text-orange-400 border-orange-500/20">
            Диалоги
          </Badge>
          <Badge variant="outline" className="bg-amber-500/10 text-amber-400 border-amber-500/20">
            Мини-игры
          </Badge>
          <Badge variant="outline" className="bg-lime-500/10 text-lime-400 border-lime-500/20">
            Прогрессия
          </Badge>
        </div>
      </div>

      <div className="space-y-8">
        {gameDiagrams.map((diagram, index) => (
          <Card key={index} className="bg-slate-800/50 border-slate-700/50">
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="text-white">{diagram.title}</CardTitle>
                <Badge variant="outline" className="bg-orange-500/10 text-orange-400 border-orange-500/20">
                  Игровые механики
                </Badge>
              </div>
              <p className="text-slate-400 text-sm">{diagram.description}</p>
            </CardHeader>
            <CardContent className="space-y-4">
              <MermaidDiagram
                title={diagram.title}
                mermaidCode={diagram.mermaid}
                description=""
                category="Игровые механики"
              />
              <div className="p-4 bg-slate-900/50 rounded-lg border border-slate-700/50">
                <h4 className="text-sm font-semibold text-purple-400 mb-2">Вывод:</h4>
                <p className="text-sm text-slate-300">{diagram.conclusion}</p>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}
