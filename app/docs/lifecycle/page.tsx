import MermaidDiagram from '@/components/mermaid-diagram'

export default function LifecyclePage() {
  return (
    <div className="space-y-12">
      {/* 54. Жизненный цикл разработки */}
      <MermaidDiagram
        title="Жизненный цикл разработки"
        description="Этапы: планирование (июнь 2025), разработка (июнь–июль 2025), релиз (5 августа 2025). Agile-методологии, трекинг в Jira, релиз на Google Play с поддержкой офлайн-режима, тёмной темы и шифрования (152-ФЗ)."
        mermaidCode={`graph TD\n    A[Планирование\\nИюнь 2025] --> B[Разработка\\nИюнь-Июль 2025]\n    B --> C[Релиз\\n5 августа 2025]`}
        category="lifecycle"
        conclusion="Регулярные спринты (2 недели), релиз после успешного тестирования, документация графика."
      />

      {/* 55. Цикл игрового дня */}
      <MermaidDiagram
        title="Цикл игрового дня"
        description="Этапы: чат (диалоги и выборы), мини-игра (задача), сохранение (автоматически в Room). Управляется GameEngine, тёмная тема, синхронизация с сервером при подключении."
        mermaidCode={`%% PlantUML\n@startuml Game Day Cycle\nskinparam monochrome true\n\n[*] --> Чат : Открытие диалогов\nЧат --> Мини_игра : Переход к задаче\nМини_игра --> Сохранение : Автосохранение\nСохранение --> [*] : Завершение дня\n@enduml`}
        category="lifecycle"
        conclusion="Тестирование каждого этапа, автоматическое сохранение, документация сценария."
      />

      {/* 56. Сессия игрока */}
      <MermaidDiagram
        title="Сессия игрока"
        description="Этапы: вход (аутентификация), игра (чат и мини-игры), выход (автосохранение и завершение). Управляется GameViewModel, тёмная тема, синхронизация с сервером через WorkManager."
        mermaidCode={`graph TD\n    A[Вход\\nLockScreen] --> B[Игра\\nЧат, мини-игры]\n    B --> C[Выход\\nАвтосохранение]`}
        category="lifecycle"
        conclusion="Тестирование на прерывания, офлайн-автосохранение, документация шагов."
      />

      {/* 57. Цикл обновления сервера */}
      <MermaidDiagram
        title="Цикл обновления сервера"
        description="Этапы: патчи (еженедельно), тестирование (staging), деплой (продакшен с минимальным простоем). Управляется DevOps-инженером через CI/CD (GitHub Actions), шифрование данных, тёмная тема в админке."
        mermaidCode={`%% PlantUML\n@startuml Server Update Cycle\nskinparam monochrome true\n\n[*] --> Патчи : Разработка исправлений\nПатчи --> Тестирование : Проверка на staging\nТестирование --> Деплой : Развёртывание\nДеплой --> [*] : Завершение\n@enduml`}
        category="lifecycle"
        conclusion="Минимальный downtime, тестирование перед деплоем, документация расписания."
      />

      {/* 58. Жизненный цикл сессии пользователя */}
      <MermaidDiagram
        title="Жизненный цикл сессии пользователя"
        description="Этапы: вход (аутентификация), активность (чат, мини-игры), выход (завершение сессии, автосохранение). Офлайн-режим, автосохранение, соответствие 152-ФЗ."
        mermaidCode={`%% PlantUML\n@startuml Session Lifecycle\nskinparam monochrome true\n\n[*] --> Вход : Аутентификация\nВход --> Активность : Чат, мини-игры\nАктивность --> Выход : Завершение сессии\nВыход --> [*] : Автосохранение\n@enduml`}
        category="lifecycle"
        conclusion="Требует тестирования на прерывания, автосохранение работает офлайн, документация включает все этапы пользовательской сессии."
      />
    </div>
  )
} 